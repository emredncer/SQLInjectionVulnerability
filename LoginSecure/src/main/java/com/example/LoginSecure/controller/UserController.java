package com.example.LoginSecure.controller;

import com.example.LoginSecure.abstacts.IUserService;
import com.example.LoginSecure.entities.User;
import org.springframework.web.bind.annotation.*;

import java.sql.*;
import java.util.Optional;

@RestController
@CrossOrigin
@RequestMapping("/v1/users")
public class UserController {

    private final IUserService userService;

    private static final String DB_URL = "jdbc:postgresql://localhost:5432/logindb";
    private static final String DB_USER = "postgres";
    private static final String DB_PASSWORD = "postgres";

    @PostMapping("/insecureLogin")
    public String insecureLogin(@RequestParam String username, @RequestParam String password) {
        String sql = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

            if (resultSet.next()) {
                return "Login successful!";
            } else {
                return "Invalid username or password!";
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return "Error occurred while processing login request!";
        }
    }

    public UserController(IUserService userService) {
        this.userService = userService;
    }

    @PostMapping("/register")
    public User register(@RequestParam String username, @RequestParam String password, @RequestParam String email){
        return userService.register(new User(null, username, password, email));
    }
    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        if (isValidUser(username, password)) {
            return "redirect:/home";
        } else {
            return "login";
        }
    }

    private boolean isValidUser(String username, String password) {
        Optional<User> user = userService.login(username, password);
        if (user.isEmpty()) {
            return false;
        }
        else {
            return user.get().getPassword().equals(password);
        }
    }

}
